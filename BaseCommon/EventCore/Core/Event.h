/*/-------------------------------------------------------------------
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : tEvent.h
//  @ Date : 2011-5-18
//  @ Author : 杨文鸽
//  事件驱动系统事件核心
//  即可直接执行(DoEvent(bIm)),又可被触发执行(Waiting)
	NOTE: 2016.8.5
		1 重用优化, 事件工厂内临时缓存空闲的事件，超过一定数目进行真正释放
		2 安全释放 USE_SAFT_RELEASE_EVENT, 事件中心内收集所有需要释放的事件, 
		  ProcessEvent中批量释放，且分析是否在使用
	   *3 合理释放, 事件逻辑内使用Free(),不可强行释放._free()
		  否则 释放的事件释放后会被继续使用, 出现未知逻辑错误
		4 优化释放, (目前未使用)可以 覆盖 _free 调用事件Free, 在ProcessEvent内统一真正释放
//-------------------------------------------------------------------*/
#if !defined(_TEVENT_H)
#define _TEVENT_H

#include "EventCore.h"

#include "Hand.h"
#include "AutoString.h"
#include "DataBuffer.h"
#include "BaseTable.h"
#include "BaseRecord.h"
#include "NiceData.h"
#include "EasyList.h"
#include "MemBase.h"
#include <memory.h>
#include "PoolList.h"
#include "EventCallBack.h"
#include "PacketFactory.h"

#if __LINUX__
#	define SAVE_DEBUG_INFO		0
#elif _DEBUG
#	define SAVE_DEBUG_INFO		0
#else
#	define SAVE_DEBUG_INFO		0
#endif

#define	USE_SAFT_RELEASE_EVENT	0

#define SCRIPT_VALUE_NAME	"__script_obj__"

class tNetConnect;

namespace LuaPlus
{
	class LuaObject;
}

enum LOGIC_EVENT_STATE
{
	STATE_EVENT_FINISH				= 1,			// 事件已完成
	STATE_EVENT_NEED_DESTORY		= 1<<1,			// 需要释放
	STATE_EVENT_NOAUTO_COMPRESS		= 1<<3,			// 不使用自动压缩发送
    STATE_EVENT_USE_PROTOCOL_SAVE   = 1<<2,           // 使用协议方式序列
    STATE_EVENT_NEED_SAVE_PROTOCOL = 1<<4,          // 需要序列保存协议
	STATE_EVENT_OVERTIME			= 1<<5,			// 事件等待时间超时
	STATE_ALREADY_RESPONSE			= 1<<6,			// 事件已经回复
	
};
class tNetHandle;
class tNetConnect;

namespace Logic
{
	class ObjectPtr : public AutoBase
	{
	public:
		void *mpObject = NULL;
	};

	typedef Auto<ObjectPtr>	AObjectPtr;

	class tEventFactory;
	class tEventCenter;
	//-------------------------------------------------------------------------*

	enum RUN_EVENT_RESULT
	{
		RUN_SUCCEED,
		RUN_FAILED,
		RUN_NOTHING,
	};
	//-------------------------------------------------------------------------*
	class EventCoreDll_Export tEvent : public Base<tEvent>
	{		
	public:		
		typedef Hand<tEvent>	AutoEvent;
		friend class Hand<tEvent>;
		friend class tEventFactory;
		friend class tEventCenter;

	protected:
		tEvent();

    public:
		virtual ~tEvent();		
		virtual void Release() override;

		virtual void AsyncDo();
		bool AWait(float waitTime);

	public:
		virtual bool DoEvent(bool bImmediately = true);
		virtual bool DoTimeOver(void);
		virtual bool OnEvent(AutoEvent &hEvent);
		virtual bool OnEvent(void *pData, const type_info &dataType){ return _OnEvent(pData, dataType); }
		virtual void Start() { if (!Send()) ERROR_LOG("%s Send fail", GetEventName()); }
		virtual void Finish(void);
		virtual void Log( const char* lpszFormat, ... );
		virtual void Dump(void);
		virtual bool StandardDataEvent() const { return false; }
		virtual void _AsyncDo() { DoEvent(true); }

		virtual int GetNameIndex(void) = 0;
		virtual const char* GetEventName(void) const = 0;
		virtual AString GetEventNameInfo() const;

		virtual bool _Serialize(DataStream *destData) = 0;
		virtual bool _Restore(DataStream *scrData) = 0;

		virtual bool _SaveDataType(DataStream *destData) = 0;
		virtual NICEDATA_TYPE _RestoreDataType(DataStream *scrData) = 0;	

	public:
		virtual bool Begin() = 0;
		virtual void Wait() = 0;
		virtual bool Update(float onceTime) = 0;	
		virtual bool WaitTime(float waitTime) = 0;

		virtual bool StartUpdate(float spaceSecond) = 0;
		virtual AutoEvent StartEvent(const char* eventName) = 0;
		virtual AutoEvent StartEvent(const char* eventName, bool bDefault) = 0;
		virtual void SetFactory(Hand<tEventFactory> hFactory) = 0;
		virtual Hand<tEventFactory> GetEventFactory(void) const = 0;
		virtual tEventCenter* GetEventCenter(void) const = 0;
		virtual int _GetEnvironmentID(void)const;

		virtual void StopWaitTime();
		virtual void StopUpdate();

		virtual void PauseTime();
		virtual void ContinueTime();
		
		virtual bool Send(int nType = 0, int nTarget = 0 ) = 0;
		virtual void _OnBindNet(tNetConnect *netTool) = 0;

		virtual void setFinished(bool bFinish) = 0;
		virtual bool getFinished(void) const = 0;

		virtual void Free() = 0;
		virtual bool needFree (void) const = 0;

		virtual void SetAutoCompress(bool bUse) = 0;
		virtual bool NeedAutoCompress(void) = 0;
		
		virtual void setState(int state, bool bOpen) = 0;
		virtual bool hasState(int state) const = 0;

	public:
		//逻辑系统部分
		virtual bool SameEventType(int eventTypeIndex);
		virtual bool _MakeInfo( AString &strInfo ){ Log("信息: %s", strInfo.c_str()); return false; }		
		virtual void _OnError( const char *szError ){ Log("事件错误:", szError); }
        virtual void _dump();

	public:
		virtual bool _DoEvent() = 0;
		virtual void _Process(void*) = 0;
		virtual bool _OnTimeOver(void) = 0;
		virtual bool _OnEvent(AutoEvent &hEvent) = 0;
		virtual bool _OnEvent(void *pData, const type_info &dataType){ return true; }
		virtual void _OnBegin() = 0;
		virtual void _OnFinish() = 0;
		virtual bool _AutoFinish() = 0;
		virtual void _NodifyEventFinish() = 0;
		virtual bool _CheckInCurrentThread() { return true; }

		virtual void SetThreadIndex(int threadIndex){  }
		virtual void SetThreadName(const char* threadName){}		

	public:
		virtual void InitData(void) = 0;
		virtual void SetData(AutoNice &scrData) = 0;
		virtual size_t AppendData(const tNiceData &scrData, bool bReplace) = 0;
		virtual tNiceData& GetData(void) = 0;
		virtual const tNiceData& GetData(void) const = 0;
		virtual Data get(const char* szKey, const char *throwInfo = NULL) const = 0;
		virtual Data get(int nKey) const = 0;
		//virtual AData& operator [] (const char* szKey){ return GetData()[szKey]; }
		//virtual AData& operator [] (int i){ return GetData()[i]; }
		virtual bool existData(const char *dataNameList, AString *resultInfo = NULL);
		virtual bool removeData(const char* dataName);

		virtual void set(const char* szKey, int nVal) = 0;
		virtual void set(const char* szKey, byte nVal) = 0;
		virtual void set(const char* szKey, float fVal) = 0;
		virtual void set(const char* szKey, const char* szVal) = 0;
		virtual void set(const char* szKey, const AString &strVal) = 0;
		//virtual void set(const char* szKey, const char* szVal, ...);
		virtual void set(const char* szKey, bool bVal) = 0;
		virtual void set(const char* szKey, UInt64 uVal) = 0;

		virtual bool set(const char* szKey, AutoNice &nice) = 0;
		virtual bool set(const char* szKey, AutoEvent &hEvent) = 0;
		virtual bool set(const char* szKey, AutoData &hData) = 0;
		virtual bool set(const char* szKey, ARecord &hRecord) = 0;
		virtual bool set(const char* szKey, AutoTable &hTable) = 0;
		virtual bool set(const char* szKey, void *obj, const type_info &typeInfo) = 0;

		virtual bool get(const char* szKey, AutoNice &nice) = 0;
		virtual bool get(const char* szKey, AutoEvent &hEvent) = 0;
		virtual bool get(const char* szKey, AutoData &hData) = 0;
		virtual bool get(const char* szKey, ARecord &hRecord) = 0;
		virtual bool get(const char* szKey, AutoTable &hTable) = 0;
		virtual bool get(const char* szKey, void *obj, const type_info &typeInfo) = 0;		

	public:
		// for hand [] operate
		virtual Data _getData(const char *szKey) const override { return ((tEvent*)(this))->GetData()._getData(szKey); }
		virtual Data _getData(int nKey) const override { return ((tEvent*)(this))->GetData()._getData(nKey); }
		virtual void* _GetScriptObject( void ) = 0;
		virtual void _FreeScriptObject(void) = 0;
		virtual void _OnEventFinishNodify(AutoEvent event) = 0;

		virtual void NotifyAction(void *pAction, const type_info &) = 0;

		//virtual void setFormat( const char* key, const char* szVal, ... );		

		virtual void setUseData(void *pData) = 0;
		virtual void* getUseData() const = 0;

		virtual void setUpdateInfo(void *pData) = 0;
		virtual void* getUpdateInfo() const = 0;


#if SAVE_DEBUG_INFO
	public:
		size_t __declspec(thread)	mCode;
		//virtual const AString& _MakeLinkInfo(AutoEvent &upLink) = 0;
		//virtual const AString& _GetLinkInfo() = 0;
		//virtual int _GetStep() = 0;
		static __declspec(thread) size_t gCode;
#endif
		 
#if DEVELOP_MODE
	public:
			AString mName;
			bool mbNowFree;
#endif
	};
}
//-------------------------------------------------------------------------*/

typedef Hand<Logic::tEvent>	AutoEvent;
typedef PoolList<AutoEvent>	EventList;

//-------------------------------------------------------------------------*/

#endif  //_TEVENT_H
