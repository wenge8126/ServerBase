//----------------------------------------------------------------------------------------
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : BaseNetSendEvent.h
//  @ Date : 2011-5-25
//  @ Author : 杨文鸽
//
//----------------------------------------------------------------------------------------

#ifndef _INCLUDE_NETHANDLE_H_
#define _INCLUDE_NETHANDLE_H_

#include "Hand.h"
#include "Auto.h"
#include "AutoString.h"
#include "DataBuffer.h"
#include "BaseCommon.h"
#include "EventCore.h"

#include "Event.h"
#include "Packet.h"
#include "ArrayList.h"
#include "ArrayIndex.h"

typedef unsigned short PacketID;


class LoopData;
class LoopDataStream;
class Packet;
class tSafeCheck;

//-------------------------------------------------------------------------
class tNetHandle;
class Packet;
class tNetConnect;
class _ConnectPtr : public AutoBase
{
public:
	tNetConnect *mpConnect;
};
typedef Auto<_ConnectPtr> ConnectPtr;

class EventCoreDll_Export tNetConnect : public Base<tNetConnect>
{
public:
	virtual ~tNetConnect(){}

	virtual bool InitCreate(){ return false; }
	virtual void SetRemove(bool bNeedRemove){}
	virtual bool IsRemove(){ return true; }
	virtual bool IsDisconnect() const { return false; }
	virtual void Close(){ }

public:
	virtual void SetNetID(int netID) = 0;
	virtual int GetNetID() const = 0;

	// 避免死锁相互引用包含
	virtual ConnectPtr GetPtr() { return ConnectPtr(); }

public:
	virtual bool SendEvent(Logic::tEvent *pEvent) = 0;
	virtual bool Send(const Packet  *msgPacket, bool bEncrypt) = 0;
	virtual tNetHandle* GetNetHandle(void) = 0;	
	virtual AutoEvent StartEvent(const char* szEvent);	

public:
	virtual void OnConnected(){}
	virtual void OnDisconnect(){}
	virtual void OnSucceedSendEvent(Logic::tEvent *pEvent, Packet *p) = 0;
	virtual void OnReceiveEvent(Logic::tEvent *pEvent, const Packet *pPacket){}
	virtual void OnReceivePacket(Packet *msgPacket, Logic::tEvent*){ }
    virtual void OnPing(Packet *pingPacket){ }

	virtual bool Process() = 0;

	virtual tNetConnect* Clone(){ return NULL; }
	virtual UInt64 GetIPKey(){ return 0; }

	virtual const char* GetIp(){ return "UNKOWN"; }
	virtual int GetPort(){ return 0; }

	virtual UINT GetSendBufferDataSize(){ return 0; }

	virtual uint GetSendDataSize(){ return 0; }
	virtual uint GetReceiveDataSize(){ return 0; }
    virtual AutoAny GetUserData() { return AutoAny(); }
	virtual void SetUserData(AutoAny userData) {}

public:
	AutoAny		mAttachData;
};

typedef Hand<tNetConnect>		HandConnect;
typedef ArrayList<HandConnect>	ConnectList;

enum STRING_CODE
{
    NET_STRING_DEFAULT_SYSTEM_CODE,
	NET_STRING_ANIS,
	NET_STRING_UTF8,
	NET_STRING_UNICODE,
};
//-------------------------------------------------------------------------
// 网络数据协议, 同时可提供压缩算法
class tNetProtocol : public AutoBase
{
public:
	virtual ~tNetProtocol()
	{

	}

public:
	virtual int GetMsgHeadSize() const  = 0;
	//write or read packet
	virtual HandPacket	CreatePacket (PacketID packetID) = 0;

	virtual bool WritePacket( const Packet* pPacket, DataStream *destOutputStream ) = 0;
	virtual HandPacket ReadPacket( tNetConnect *pConnect, DataStream *scrInputStream ) = 0;

	virtual void OnPacketExecuteError(tNetConnect *pConnect, Packet *pPacket) = 0;

	virtual bool RegisterNetPacket(AutoPacketFactory f, bool bRespace = true){ return false; }
	virtual int AppendNetPacketFrom(tNetProtocol *other, bool bReplace){ return 0; }
	virtual AutoPacketFactory FindPacketFactory(PacketID_t packetID) { return AutoPacketFactory(); }
};

//-------------------------------------------------------------------------*

//-------------------------------------------------------------------------*
class tNetHandle : public Base<tNetHandle>
{
public:
	tNetHandle()
	{
	}
	virtual ~tNetHandle()
	{
	}

	virtual void SetIndexName(const char* strIndexName) = 0;
	virtual const char*  GetIndexName(void) const = 0;
	virtual void Process(void)  = 0;
	// 低频循环(间隔1秒一次)
	virtual void LowProcess(int spaceTime) { }

	virtual AutoAny GetAttachData() { return AutoAny(); }

public:
	//virtual bool StartNet(void) = 0;
	virtual void StopNet(void){}
	virtual bool StartNet(const char *szIP, int port) = 0;

	//---------------------------------------------------
public:
	virtual HandConnect GetClientConnect() { return HandConnect(); }
	//virtual tNetConnect* GetConnect(int netID) = 0;
	virtual int GetConnectCount(){ return 0; }

	virtual bool OnAddConnect(tNetConnect *pConnect) = 0;
	virtual void OnCloseConnect(tNetConnect *pConnect) = 0;

	virtual void ProcessReceivePacket(tNetConnect *pConnect, Packet *pPacket) = 0;

	virtual bool OnReceiveEvent(tNetConnect *revConnect, Logic::tEvent *revEvent) = 0;
	virtual void OnReceivePacket(Packet *){ ERROR_LOG("xxxxxxxxxx can not process eceive"); }
	//---------------------------------------------------
	// 连接部分
public:	
	virtual const char* GetIp(void) const = 0;
	virtual int		GetPort(void) const = 0;

	virtual int GetConnectOverTime(void) = 0;
	virtual int GetTryConnectCount(void) = 0;
	virtual const char* GetConnectFinishEvent(void) = 0; 	


public:
	virtual bool IsOk(void) = 0;
	virtual bool TryReady(void) = 0;
	virtual bool IsConnecting(){ return false; }

public:
	virtual tNetProtocol* GetNetProtocol(void) = 0;
	virtual Logic::tEventCenter* GetEventCenter(void) const = 0; 
	virtual void BindEventCenter(){}

	virtual void OnUpdateNetMsgIndex(){}
	virtual void OnMsgRegistered(int eventMsgIndex){}
	virtual bool NeedUpdateMsgIndex() const { return true; }
	virtual bool NeedMsgEventIndex(const char *msgName, int msgNameIndex) const { return true; }
    virtual int MaxWaitSendPacketCount() const { return 1000000; }

public:
	virtual bool NeedZipSendPacket(){ return false; }
	virtual bool NeedEncryptPacket() const { return false; }

	virtual bool NeedRemoveOnMsgError() const { return false; }

	virtual AString OnSendStringConvertCode(const char *szSendString) = 0;
	virtual AString OnReceiveStringConverCode(const char *szReceiveString) = 0;

	virtual void AddSendTotalSize(int sendDataSize){}
	virtual void AddReceiveTotalSize(int receiveDataSize){}

	virtual int GetSafeCode(){ return 0; }
	virtual int GetSafeCheckOverTime(){ return 60; }
	
};

//-------------------------------------------------------

typedef Hand<tNetHandle>		AutoNet;

//-------------------------------------------------------------------------*/
class tNetTool : public Base<tNetTool>
{
public:
	virtual bool SendEvent(Logic::tEvent *pSendEvent) = 0;
};
//-------------------------------------------------------------------------*/

#endif  //_INCLUDE_NETHANDLE_H_
