#pragma once

#include "CommonLib.h"


//-------------------------------------------------------------------------
// 加解密数据
const unsigned char encrypt_sbox[256] =
{
	0xe2,0x01,0xbc,0xb6,0xf7,0x93,0xd0,0x5c,0xa6,0xea,0x1d,0xb5,0x13,0x6c,0x62,0x6f,
	0xab,0x40,0x55,0x8d,0xae,0xd2,0xdb,0xb0,0xd4,0x33,0xa0,0xe9,0xcd,0x96,0xd1,0x8c,
	0x84,0xd3,0x34,0x92,0xb1,0xc5,0x61,0x6e,0x59,0x43,0x0a,0x81,0x54,0xa3,0x0f,0x4a,
	0xee,0xa2,0x0d,0xe3,0xf4,0xc6,0xaf,0x18,0x38,0xff,0xe6,0x6d,0x53,0x9e,0x78,0xa9,
	0x06,0xce,0x7b,0x56,0x29,0xad,0x75,0x11,0x74,0x17,0x58,0x36,0x2e,0x67,0x2f,0x19,
	0x86,0xf2,0x09,0x65,0x5e,0x79,0xfe,0x73,0x27,0x5d,0xf5,0x52,0xe4,0xe1,0xbd,0xdc,
	0x7c,0x90,0x2a,0xc2,0xde,0x5b,0xcf,0x3d,0x39,0xfa,0x15,0xa4,0x0c,0x89,0x44,0x35,
	0xc1,0x9f,0x12,0xf1,0x80,0x77,0x4d,0x5a,0x2b,0x91,0x64,0xc0,0xcb,0x04,0xd9,0xcc,
	0x98,0x5f,0x68,0x22,0x25,0x9b,0x50,0x83,0xdf,0x21,0x31,0x32,0xf9,0x85,0x99,0x0b,
	0xe7,0xb7,0x3a,0x02,0x1e,0xe0,0x28,0xa1,0xc9,0x47,0x46,0xaa,0x6b,0x69,0x70,0x3b,
	0x1b,0x41,0x49,0x0e,0x2d,0x23,0x20,0xa5,0x94,0xb3,0xf6,0xeb,0x3c,0xb9,0x8a,0x95,
	0x1a,0xb8,0xb4,0x7e,0xa7,0x05,0xbb,0x1c,0xbf,0x7a,0x4e,0xda,0xd5,0xc3,0xba,0x37,
	0xf8,0x72,0xc4,0xac,0xfc,0x1f,0x8f,0x97,0xdd,0x16,0x87,0x42,0x88,0xc7,0xe5,0xe8,
	0x03,0x4c,0x66,0x57,0x6a,0xd8,0x14,0x9a,0x26,0x3f,0x24,0x2c,0x9c,0x51,0x10,0xa8,
	0x07,0x82,0xb2,0x8e,0xd6,0xca,0xef,0xfb,0x08,0x76,0x4f,0x9d,0xd7,0x00,0x3e,0x60,
	0xbe,0xed,0x71,0xf0,0x8b,0xfd,0xc8,0xec,0x45,0x63,0x30,0x48,0xf3,0x7d,0x7f,0x4b,
};


const unsigned char encrypt_invsbox[256] =
{
	0xed,0x01,0x93,0xd0,0x7d,0xb5,0x40,0xe0,0xe8,0x52,0x2a,0x8f,0x6c,0x32,0xa3,0x2e,
	0xde,0x47,0x72,0x0c,0xd6,0x6a,0xc9,0x49,0x37,0x4f,0xb0,0xa0,0xb7,0x0a,0x94,0xc5,
	0xa6,0x89,0x83,0xa5,0xda,0x84,0xd8,0x58,0x96,0x44,0x62,0x78,0xdb,0xa4,0x4c,0x4e,
	0xfa,0x8a,0x8b,0x19,0x22,0x6f,0x4b,0xbf,0x38,0x68,0x92,0x9f,0xac,0x67,0xee,0xd9,
	0x11,0xa1,0xcb,0x29,0x6e,0xf8,0x9a,0x99,0xfb,0xa2,0x2f,0xff,0xd1,0x76,0xba,0xea,
	0x86,0xdd,0x5b,0x3c,0x2c,0x12,0x43,0xd3,0x4a,0x28,0x77,0x65,0x07,0x59,0x54,0x81,
	0xef,0x26,0x0e,0xf9,0x7a,0x53,0xd2,0x4d,0x82,0x9d,0xd4,0x9c,0x0d,0x3b,0x27,0x0f,
	0x9e,0xf2,0xc1,0x57,0x48,0x46,0xe9,0x75,0x3e,0x55,0xb9,0x42,0x60,0xfd,0xb3,0xfe,
	0x74,0x2b,0xe1,0x87,0x20,0x8d,0x50,0xca,0xcc,0x6d,0xae,0xf4,0x1f,0x13,0xe3,0xc6,
	0x61,0x79,0x23,0x05,0xa8,0xaf,0x1d,0xc7,0x80,0x8e,0xd7,0x85,0xdc,0xeb,0x3d,0x71,
	0x1a,0x97,0x31,0x2d,0x6b,0xa7,0x08,0xb4,0xdf,0x3f,0x9b,0x10,0xc3,0x45,0x14,0x36,
	0x17,0x24,0xe2,0xa9,0xb2,0x0b,0x03,0x91,0xb1,0xad,0xbe,0xb6,0x02,0x5e,0xf0,0xb8,
	0x7b,0x70,0x63,0xbd,0xc2,0x25,0x35,0xcd,0xf6,0x98,0xe5,0x7c,0x7f,0x1c,0x41,0x66,
	0x06,0x1e,0x15,0x21,0x18,0xbc,0xe4,0xec,0xd5,0x7e,0xbb,0x16,0x5f,0xc8,0x64,0x88,
	0x95,0x5d,0x00,0x33,0x5c,0xce,0x3a,0x90,0xcf,0x1b,0x09,0xab,0xf7,0xf1,0x30,0xe6,
	0xf3,0x73,0x51,0xfc,0x34,0x5a,0xaa,0x04,0xc0,0x8c,0x69,0xe7,0xc4,0xf5,0x56,0x39,
};

const unsigned char encrypt_xor_key[] =
{
	0x2f,0x84,0xd2,0xf1,0x12,0x98,0x07,0xd9,0xc2,0x5e,0xe1,0x22,0xad,0xae,0x52,0x75
};

#define ENCRYPT_XOR_COM(x,xlen,BeginPlace)	if( (x)!=NULL ) \
	{ \
	\
	BYTE* t_pBuffer = (x); \
	UINT KeyLen = (UINT)sizeof(encrypt_xor_key); \
	for (UINT i = 0; i < (UINT)(xlen); i++) \
	{ \
	*t_pBuffer ^= encrypt_xor_key[(i+BeginPlace)%KeyLen]; \
	t_pBuffer++; \
		} \
		}

#define DECRYPT_XOR_COM(x,xlen,BeginPlace) ENCRYPT_XOR_COM(x,xlen,BeginPlace)

#define ENCRYPT_BOX_COM(x, xlen)  \
	{ \
	\
	BYTE* t_pBuffer = (BYTE*)(x); \
	for (UINT i = 0; i < (UINT)(xlen); i++) \
	{ \
	*t_pBuffer = encrypt_sbox[*t_pBuffer]; \
	t_pBuffer ++; \
		}\
		}

#define DECRYPT_BOX_COM(x, xlen)  \
	{ \
	\
	BYTE* t_pBuffer = (BYTE*)(x); \
	for (UINT i = 0; i < (UINT)(xlen); i++) \
	{ \
	*t_pBuffer = encrypt_invsbox[*t_pBuffer]; \
	t_pBuffer ++; \
		}\
		}

#define ONEGAME_ENCRYPT_COM(x, xlen)	{ ENCRYPT_XOR_COM(x, xlen, 0); ENCRYPT_BOX_COM(x, xlen); }

#define ONEGAME_DECRYPT_COM(x, xlen)	{ DECRYPT_BOX_COM(x, xlen); DECRYPT_XOR_COM(x, xlen, 0); }
//-------------------------------------------------------------------------

class CommonLib_Export_H GameCommon
{
public:
	static void Analysis(NiceData &msg, const AString &requestData)
	{
		Array<AString> tempList;
		AString::Split(requestData.c_str(), tempList, "&", 100);
		for (int i = 0; i < tempList.size(); i++)
		{
			Array<AString> str;
			AString::Split(tempList[i].c_str(), str, "=", 2);

			if (str.size() == 2)
			{
				msg[str[0].c_str()] = str[1].c_str();
			}
		}
	}

	// 生成TOKEN 手机号, 权限, 时间, HASH, 保存在NiceData序列后加密
	static AutoData MakeToken(Int64 phone, Int64 userID, int nState, int nPower, NiceData &data)
	{
		UInt64 time = TimeManager::Now();
		AString str;
		str.Format("%s_%s_%d_%d_%llu", STRING(phone), STRING(userID), nState, nPower, time);
		int key = MAKE_INDEX_ID(str.c_str());

		data.clear(false);
		data["PHONE"] = phone;
		data["TIME"] = time;
		data["DBID"] = userID;
		data["STATE"] = nState;
		data["POWER"] = nPower;
		data["KEY"] = key;

		 AutoData  d = MEM_NEW DataBuffer();

		 data.serialize(d.getPtr());

		 ONEGAME_ENCRYPT_COM((byte*)d->data(), d->dataSize());

		return d;
	}

	static bool CheckToken(AutoData tokenData, DataBuffer &tempBuffer, NiceData &tempNice)
	{
		if (!tokenData)
			return false;
		tempBuffer.clear();
		tempBuffer._write(tokenData->data(), tokenData->dataSize());

		ONEGAME_DECRYPT_COM((byte*)tempBuffer.data(), tempBuffer.dataSize());
		tempBuffer.seek(0);
		tempNice.clear(false);
		if (!tempNice.restore(&tempBuffer))
			return false;

		Int64 phone = tempNice["PHONE"];
		Int64 userID = tempNice["DBID"];
		UInt64 time = tempNice["TIME"];
		int nState = tempNice["STATE"];
		int nPower = tempNice["POWER"];
		int key = tempNice["KEY"];

		AString str;
		str.Format("%s_%s_%d_%d_%llu", STRING(phone), STRING(userID), nState, nPower, time);
		int checkKey = MAKE_INDEX_ID(str.c_str());

		return key == checkKey;
	}
};
